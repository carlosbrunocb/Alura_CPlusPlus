@ [Makefile]
  * É um arquivo com configurações de build (compilação) dos arquivos c++

  + Comentário: Para inserir comentários em um arquivo makefile basta usar o #.
    Ex.: 
         # Isso é um comentário e não será aplicado/lido quando o arquivo Makefile
         # for executado.


@ [VS-CODE] Dicas e comandos de edição de texto
  * SEGURE o ctrl + alt [nessa ordem] e arraste para baixo até a linha desejada: 
    Isso permite que várias linhas sejam editadas ao mesmo tempo
    Ex:
        chutou ['A'] = falso  ==>>      chutou ['A'] = falso  
        |                               chutou ['M'] = verdadeiro
        |                               chutou ['O'] = falso
        |                               chutou ['R'] = falso
                                
@ [fstream] ifstream: leitura de arquivos
  * '>>': consegue ser usado para ler uma linha do arquivo
    Ex.: dados_do_arquivo >> variavel;

@ [Compilação C++] Comandos de compilação
  * Compilação de arquivos para geração da unidade de tradução (código binário) -
    conhecido como código intermediário ou objeto.
    [arquivo objeto: file.o]
    Ex.: 
      $ g++ -c file.cpp
      >> resultado: file.o
  * Compilação de arquivos para geração de um arquivo executável [linking]
    [file.exe]
    Ex.:
      $ g++ -o *.cpp file.exe
  
  OBS.:
    + Podemos gerar várias unidade de tradução (arquivos objetos). Isso permite, isolar a compilação
      à arquivos individuais facilitando a manuntanção do software, pois, se precisar alterar uma parte
      do código só precisamos compilar o aquivo em que ele se encontra e depois gerar o executavel pelo
      processo de ligação das unidade de tradução.

@ [vtable] virtual method table (VMT), virtual function table, virtual call table, dispatch table
  * É um mecanismo usado na linguagem de programação para fornecer o despacho dinâmico 
    [polimorfismo | vinculação de métodos em tempo de execução].
  * Sempre que uma classe define uma função virtual (ou método), a maioria dos compiladores 
    adiciona uma variável de membro oculta à classe que aponta para um array de ponteiros 
    de funções (virtuais) chamadas de tabela de método virtual. 
  * Esses ponteiros são usados em tempo de execução para invocar apropriadas implementações de função, 
    porque em tempo de compilação pode ainda não ser conhecido se a função base deve ser chamada 
    ou derivada implementada por uma classe que herda da classe base.

@ [C++] NOTAS
  # extern: é um comando usado em variáveis globais, funções ou declaração de template
      para especificar que há uma LIGAÇÃO EXTERNA ("external linkage"), ou seja, evitar 
      duplicidade de declaração e informar ao compilador que aquela declaração já existe em
      algum arquivo ou parte da codificação e que novas declarações do mesmo identificador e 
      tipo devem usar essa declaração extern. Logo, é criado uma LIGAÇÃO de declaração para todas
      as suas duplicadas informando para usar apenas uma. 
      UM -->> TODOS
      O comando 'extern' tem quatro significado dependendo do contexto:
        + Declaração de variáveis global não constante (non-const), extern especifica que variável
          ou função é definida em outra unidade de tradução. O extern deve ser aplicado em todos os
          arquivos exceto naquele onde a variável foi definida.
        + Declaração de variáveis constantes (const), ele especifica que variável tem uma ligação 
          externa. O extern deve ser aplicado a todas a declarações em todos os arquivos.
        + extern "C" especifica que a função é definida em outro lugar e usa a chamada convencional 
          da linguagem C. O extern "C" é um modificador que pode ser aplicado a múltiplas declarações
          de funções em um bloco.
        + Declaração de template, extern especifica que o template foi instanciado em outro lugar. 
          extern informa ao compilador que ele pode reusar a outra instanciação, em vez de criar uma
          nova no local atual.
        Ex.:
          - extern ligação para constantes não globais (non-const globals)
              //fileA.cpp
              int i = 42; // declaration and definition

              //fileB.cpp
              extern int i;  // declaration only. same as i in FileA

              //fileC.cpp
              extern int i;  // declaration only. same as i in FileA

              //fileD.cpp
              int i = 43; // LNK2005! 'i' already has a definition.
              extern int i = 43; // same error (extern is ignored on definitions)

          - extern ligação para constantes globais (const global)
              //fileA.cpp
              extern const int i = 42; // extern const definition

              //fileB.cpp
              extern const int i;  // declaration only. same as i in FileA
          
          - extern constexpr
              extern constexpr int x = 10; //error LNK2005: "int const x" already defined
              extern constexpr __declspec(selectany) int x = 10;
          
          - extern "C" e extern "C++" para declarações de funções
              // Declare printf with C linkage.
              extern "C" int printf(const char *fmt, ...);

              //  Cause everything in the specified
              //  header files to have C linkage.
              extern "C" {
                  // add your #include statements here
              #include <stdio.h>
              }

              //  Declare the two functions ShowChar
              //  and GetChar with C linkage.
              extern "C" {
                  char ShowChar(char ch);
                  char GetChar(void);
              }

              //  Define the two functions
              //  ShowChar and GetChar with C linkage.
              extern "C" char ShowChar(char ch) {
                  putchar(ch);
                  return ch;
              }

              extern "C" char GetChar(void) {
                  char ch;
                  ch = getchar();
                  return ch;
              }

              // Declare a global variable, errno, with C linkage.
              extern "C" int errno;
              ---------------------
              extern "C" int CFunc1();
              ...
              int CFunc1();           // Redeclaration is benign; C linkage is
                                      //  retained.

              int CFunc2();
              ...
              extern "C" int CFunc2(); // Error: not the first declaration of
                                       //  CFunc2;  cannot contain linkage
                                       //  specifier.

  #pragma once: Instrução de pré-processamento que informa que arquivo de cabeçalho será
    incluído apenas uma vez pelo compilador.
    * É uma diretiva de compilação não padrão (not standard), geralmente, utilizada para 
      otimização de múltiplas includes (multiple-include optimization).
      + Ela é usadar em headers para fazer com que o ficheiro atual apenas seja incluído 
        uma vez durante o processo de compilação.
    Ex.:
      File "creature.h"

      #pragma once

      struct creatureInfo
      {
          int member;
      };
      -----------------
      File "animal.h"

      #include "creature.h"
      -----------------
      File "human.h"

      #include "creature.h"
      #include "animal.h"

  # inline functions: informa ao compilador para substituir o código na definição função
      para cada instância da chamada da função.
      * Pode permitir que seu programa seja mais rápido porque ele elimina a sobrecarga 
        associada às chamadas de função.
      * A substituição do código embutido ocorre a critério do compilador. Por exemplo, o 
        compilador não vai embutir uma função se seu endereço já estiver em uso ou se for 
        muito grande para embutir.
      * Esses tipos devem ser declarados no cabeçalho porque ela serão trazidas para dentro
        da função, ou seja, ele irá ficar na mesma unidade de tradução.
        OBS.:
          + Arquivos cabeçalho não são compliados. Eles são importados para dentro do código que os
            inclue. (Mesmo conceito das funções embutidas - inline fucntios) 
          + Para o compilador decidir isso ele precisa conhecer a função.
      * Uma função definida no corpo de uma declaração de classe é, implicitamente, uma 
        função embutida.
      * Uma função inline não é compilada por si só. Se você modificar uma função inline, 
        todos os arquivos que a usam vão precisar ser recompilados.

      Ex.:
        // Inline_Member_Functions.cpp
        class Account
        {
        public:
            Account(double initial_balance) { balance = initial_balance; }
            double GetBalance();
            double Deposit( double Amount );
            double Withdraw( double Amount );
        private:
            double balance;
        };

        inline double Account::GetBalance()
        {
            return balance;
        }

        inline double Account::Deposit( double Amount )
        {
            return ( balance += Amount );
        }

        inline double Account::Withdraw( double Amount )
        {
            return ( balance -= Amount );
        }
        int main()
        {
        }
  # Desreferenciação de ponteiro: 
    Ex.:
      map<string, int>* variable;
      vector<string>* variable0;

      (*variable)[str] = 1;
      variable0->push_back(str);
      (*variable0).push_back(str);

  # Referencia em c++: Em c++ pode-se passar referências de maneiras "simplificada"
      dentro da função que o compilador vai entender que está passando um endereço
      não precisando desreferenciar depois.
      Ex.:
        function(char& var, int& var1);

        //In the function call
        function(var, var1);
  # const: especifica que o objeto ou a variável não é modificável.
      + Em declarações de variáveis: especifica que um valor de variável é constante e 
          informa o compilador para impedir que o programador a modifique.
        Ex.:
          // constant_values1.cpp
          int main() {
            const int i = 5;
            i = 10;   // C3892
            i++;   // C2105
          }
      + Em parâmetro de funções passado como referências: Usado para indicar que um parâmetro 
          passado como referência não será modificado o seu valor na função, ou seja, evitar que a 
          função modifique um parâmetro passado como ponteiro.
        Ex.:
          // const char& var indica que valor passado como referência não pode se modificado
          function(const char& var, int& var1);
      + [metódos] Em funções membros: especifica que aquela é uma função “somente leitura” que 
          não modifica o objeto para o qual é chamada. Ela não pode alterar membros de dados não 
          estáticos ou chamar qualquer função membro que não seja uma constante.
        Ex.:
          // constant_member_function.cpp
          class Date
          {
          public:
            Date( int mn, int dy, int yr );
            int getMonth() const;     // A read-only function
            void setMonth( int mn );   // A write function; can't be const
          private:
            int month;
          };

          int Date::getMonth() const
          {
            return month;        // Doesn't modify anything
          }
          void Date::setMonth( int mn )
          {
            month = mn;          // Modifies data member
          }
          int main()
          {
            Date MyDate( 7, 4, 1998 );
            const Date BirthDate( 1, 18, 1953 );
            MyDate.setMonth( 4 );    // Okay
            BirthDate.getMonth();    // Okay
            BirthDate.setMonth( 4 ); // C2662 Error
          }  
  # static: 
      + Usado para definir variáveis globais: Pode ser usado para definir uma variável global ou símbolo 
          como existente apenas na translate unit em que ela foi declarada. Logo, elas estarão acessiveis 
          apenas dentro da translate unit em forem declaradas.
      + Usado para definir atributos globais dentro de uma classe: Permitir que um atributo seja global,
          ou seja, que todos objetos que possuem atributos static acessam o mesmo ou um único espaço de 
          memória. Logo, todos possuem o mesmo valor do atributo estático e qualquer modificação nesse 
          atributo irá refletir todos os objetos.
          [Atributos Compartilhandos entre objetos]
      + Usado para tornar métodos acessiveis sem instanciar um objeto.
        [membro que pertence a classe - método estático]
  # namespace: É uma declaritva regional que fornece um escopo para os identificadores (funções, 
      nomes de tipos, variáveis, etc) inseridos nele. Eles são usados para organizar o código 
      dentro de grupos locais e para previnir colisões de nomes que podem ocorrer quando o código
      é baseado na inclusão de múltiplas bibliotecas.
      Operardor de resolução de nomes :: 
      Ex.:
        namespace ContosoData
        {
            class ObjectManager
            {
            public:
                void DoSomething() {}
            };
            void Func(ObjectManager) {}
        }

        ContosoData::ObjectManager mgr;
        mgr.DoSomething();
        ContosoData::Func(mgr);
  # stack: bloco de memória que é alocado para um função, procedimento ou método em C++.
      Ela contém a pilha de execução, onde são armezanadas os parâmetros, endereços de retorno
      e variáveis locais de funções. Elas são estática e pré-alocada no inicio do programa e 
      desalocada no final.
      OBS.:
        * A alocação de memória para stack frame, em geral, exigi apenas uma instrução.
  # heap: Área de memória fora da stack usada para alocação dinâmica de memória de diferentes
      tamanhos. Ela contém blocos de memória alocadas dinamicamente, a pedido do processo, 
      durante sua execução e varia de tamanho durante a vida do processo. Ela não impõe um 
      modelo ou padrão de alocação como no modelo stack. 
      OBS.:
        * O uso da heap é mais custoso que frame stack. Em sua operação é necessário a alocação
          e desalocação de memória de forma dinâmica baseado em um conjunto de operações que 
          necessita consulta uma free list. Essa lista contém informações de um conjunto de 
          endereços disponíveis para alocação de memória com diferentes tamanhos. Portanto,
          durante a alocação de memória há a necessidade de consultar essa lista para encontrar
          dentre o conjunto de endereços, um com o tamanho que consiga comportar a solicitação de
          alocação, ou seja, um endereço com tamanho de memória solicitado. Além disso, a free list
          deve ser atualizada após a alocação informando o tamanho e o endereço que foi utilizado.
  # struct e class: diferença de declaração de classes usando struct e class.
    + struct: a declaração de atributos e métodos sem a declaração explicita de modificadores de 
        acesso são por padrão todos públicos. [Tudo é público]
    + class: a declaração de atributos e métodos sem a declaração explicita de modificadores de 
        acesso são por padrão todos privados. [Tudo é privado]
  # Metódo usando o modificador const: usado para informar que o método não pode modificar a classe 
      ou seja, não pode modificar os atributos da classe/objeto.
  # initialization list: Forma de codificar os construtores para inicializar os atributos da classe.
      O uso de lista de inicialização "economiza" a alocação de memória para as variáveis que são usadas 
      como intermediário de cópia para atributo do objeto criado. Ela evita um passo a mais de processamento
      sendo um pouco mais rápido que o convencional.
      + Elas evitam a inicialização duplicada de objetos realcionados.
      Ex.:
        Conta::Conta(std::string numero, std::string nomeTitular, std::string cpfTitular) : 
          numero(numero), nomeTitular(nomeTitular), cpfTitular(cpfTitular) {
        }
  # Construção implícita: o C++ consegue fazer uma correspondência de valores no momento da construção e 
      selecionar um construção que se adeque ao valor passo como parâmetro de construção.
      Ex.:

        // classe Titular
        // ...
        Titular::Titular(std::string nome, Cpf cpf) :
        nome(nome), cpf(cpf) {
          verificaTamanhoDoNome();
        }

        // classe Cpf
        // ...
        Cpf::Cpf(std::string n_cpf) : n_cpf(n_cpf){
          //"243.456.780-10"
          verificaCpf();
        }

        // main
        // ...
        Titular titular_01("Vinicius", string("123.456.798-10"));

  # Construção explícita: Impedi o uso da construção implícita
      Ex.:
        class Cpf {
        private:
          std::string n_cpf;

          void verificaCpf();

        public:
          explicit Cpf(std::string n_cpf);

          std::string recuperaNumeroDoCpf();

        };
  # protected: modificador de acesso de classe que permite que somente a classe e seus herdeiros
      consigam acessar os seus atributos internos.
  # Modificador de permissão na declaração de herança: modifica as permissões da classe herdada.
      Portanto, se usar o public tudo que for público na classe herdada permanecerá público.
      Se usar o protected todos membros public irão se torna protected e se usar private todos os 
      membros ficarão privado.
  # [Metódos] Funções virtuais: é uma função membro que espera-se que seja redefinida em classes derivadas. 
      Quando você faz referência um objeto da classe derivada usando um ponteiro ou uma referência à 
      classe base, pode chamar uma função virtual para esse objeto e executar a versão da classe derivada da função. 
  # Destrutor com modificador virtual: Usado na classe base (pai) para informar que metódos destrutores implementados em 
      classes derivadas devem ser executados quando a memória for liberada dos objetos criados, ou seja, deve-se chamar 
      todos os destrutores para não gerar resíduos de memória (vazamento de memória) quando se ultiza a memória heap.
  # final: modificador usado nas definições de classes para indicar que a classe criada não pode ser herdada.
  # método virtual [abstrato]: métodos sem definições que são declarados em classes bases para serem implementados
      nas classes derivadas. Métodos puramentes virtuais são definidos como "= 0".
      Ex.:
        virtual float taxaDeSaque() const = 0;
  # Classe abstratas: em c++, classes abstratas são classes que possuem um ou mais classes puramente virtuais (métodos abstratos).
      Ex.:
        // deriv_AbstractClasses.cpp
        // compile with: /LD
        class Account {
        public:
          Account( double d );   // Constructor.
          virtual double GetBalance();   // Obtain balance.
          virtual void PrintBalance() = 0;   // Pure virtual function.
        private:
            double _balance;
        };
  # Herança Múltipla: em c++, é possível herda mais de uma classe ao mesmo tempo.
      Ex.:
        // Um exemplo de múltiplas classes base.
        #include <iostream>

        using namespace std;

        class base1 {
        protected:
                  int x;
        public:
              void showx() { cout << x << "\n"; }
        };

        class base2 {
        protected:
                  int y;
        public:
              void showy() { cout << y << "\n"; }
        };

        class derived: public base1, public base2 // Inherit multiple base classes.
        {
        public:
              void set(int i, int j) { x = i; y = j; }
        };

        int main()
        {
            derived ob;
            ob.set(10, 20); // Disponível pela classe "derived"
            ob.showx(); // Pela classe base1
            ob.showy(); // Pela classe base2
        #ifndef WIN32
            system ("pause");
        #endif
            return 0;
        }
  # Herança Virtual: As classes de base podem ser usadas como herança virtual de forma a evitar que várias 
      “instâncias” dela mesma por suas classes derivadas na hierarquia de herança múltipla.
                 Classe A 
                    |
          |------------------|        
      Classe B            Classe C
          |------------------| 
                    |
                 Classe D  [Construção ambígua - AB ou AC    ]
                           [A classe A é herdade várias vezes]
      Ex.:
        #include <iostream>
        using namespace std;
          
        class A {
        public:
            int a;
            A() // constructor
            {
                a = 10;
            }
        };
          
        class B : public virtual A {
        };
          
        class C : public virtual A {
        };
          
        class D : public B, public C {
        };
          
        int main() {
          
          D object; // object creation of class d
          cout << "a = " << object.a << endl;
        
          return 0;
        }